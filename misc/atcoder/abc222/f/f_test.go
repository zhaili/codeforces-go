// Code generated by copypasta/template/atcoder/generator_test.go
package main

import (
	"fmt"
	"github.com/EndlessCheng/codeforces-go/main/testutil"
	"io"
	"testing"
)

// 提交：https://atcoder.jp/contests/abc222/submit?taskScreenName=abc222_f
// 对拍：https://atcoder.jp/contests/abc222/submissions?f.LanguageName=Go&f.Status=AC&f.Task=abc222_f&orderBy=source_length
func Test_run(t *testing.T) {
	t.Log("Current test is [f]")
	testCases := [][2]string{
		{
			`3
1 2 2
2 3 3
1 2 3`,
			`8
6
6`,
		},
		{
			`6
1 2 3
1 3 1
1 4 4
1 5 1
1 6 5
9 2 6 5 3 100`,
			`105
108
106
109
106
14`,
		},
		{
			`6
1 2 1000000000
2 3 1000000000
3 4 1000000000
4 5 1000000000
5 6 1000000000
1 2 3 4 5 6`,
			`5000000006
4000000006
3000000006
3000000001
4000000001
5000000001`,
		},
		{
			`3
1 2 1
2 3 1
1 3 1`,
			`4
2
4`,
		},
	}
	testutil.AssertEqualStringCase(t, testCases, 0, run)
}
// https://atcoder.jp/contests/abc222/tasks/abc222_f

func TestCompare(_t *testing.T) {
	//return
	testutil.DebugTLE = 0

	inputGenerator := func() string {
		//return ``
		rg := testutil.NewRandGenerator()
		n := rg.Int(1, 9)
		rg.NewLine()
		rg.TreeWeightedEdges(n, 1, 1, 9)
		rg.IntSlice(n, 1, 9)
		return rg.String()
	}

	// https://atcoder.jp/contests/abc222/submissions/27904084
	runBF := func(in io.Reader, out io.Writer) {
		var n int
		fmt.Fscan(in, &n)

		g := make([][][2]int, n+1)
		for i := 1; i < n; i++ {
			var a, b, c int
			fmt.Fscan(in, &a, &b, &c)
			g[a] = append(g[a], [2]int{b, c})
			g[b] = append(g[b], [2]int{a, c})
		}

		d := make([]int, n)
		l := make([]int, n)
		for i := range d {
			fmt.Fscan(in, &d[i])
		}

		var dfs func(u, v, x int) [2]int
		dfs = func(u, v, x int) [2]int {
			s := v
			e := d[v-1]
			l[v-1] = max(l[v-1], x)
			if x == 0 {
				x = e
				e = 0
			}
			for i := range g[v] {
				w := g[v][i][0]
				c := g[v][i][1]
				if w != u {
					res := dfs(v, w, x+c)
					S := res[0]
					D := res[1]
					if e < c+D {
						e = c + D
						s = S
					}
				}
			}
			return [2]int{s, e}
		}

		dfs(0, dfs(0, dfs(0, 1, 0)[0], 0)[0], 0)
		for i := range l {
			fmt.Fprintln(out, l[i])
		}
	}

	testutil.AssertEqualRunResultsInf(_t, inputGenerator, runBF, run)
}
